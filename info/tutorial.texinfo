@comment -*-texinfo-*-
@node A tutorial example, Library overview, Overview of CGI, Top
@unnumbered A tutorial example

@unnumberedsec Introduction

It is easiest to understand how Cgicc might be used by first looking at
an example.  Suppose you have an HTML form on your web site asking a
user to enter their name, age, and sex, perhaps as part of a
user-registration procedure.  You wish to write a CGI script using Cgicc
to process the form in some meaningful way.

Applications written using Cgicc, like all other applications, begin
with a @code{main} function:

@lisp
@group
int main(int argc, char **argv)
@{
   // CGI processing goes here
@}
@end group
@end lisp

@unnumberedsec Initialization

The three main classes of Cgicc you will use to process the submitted
data are @code{Cgicc}, @code{CgiEnvironment}, and @code{FormEntry}.
These classes will be explained in detail later; for now, it is
sufficient to know that:

@itemize @bullet
@item
The class @code{Cgicc} is used for retrieving information on the
submitted form elements.

@item
The class @code{CgiEnvironment} is used to retrieve information on
environment variables passed from the HTTP server.

@item
The class @code{FormEntry} is used to extract various types of data from
the submitted form elements.
@end itemize

All of Cgicc's functionality is accessed through class @code{Cgicc}.
Thus, the first step in CGI processing is to instantiate an object of
type @code{Cgicc}:

@lisp
Cgicc cgi;
@end lisp

@noindent
Upon instantiation, the class @code{Cgicc} parses all data passed to the
CGI script by the HTTP server.

Since errors are handled using exceptions, you may wish to wrap your CGI
code in a @code{try} block to better handle unexpected conditions:

@lisp
@group
try @{
   Cgicc cgi;
@}

catch(exception& e) @{
   // Caught a standard library exception
@}
@end group
@end lisp

@unnumberedsec Extracting Form Information

Each element of data entered by the user is parsed into a
@code{FormEntry}.  A @code{FormEntry} contains methods for accessing
data as strings, integers, and doubles.  In the hypothetical form
mentioned above, a user would enter their name, age, and sex.
Regardless of the type of value, the data is accessed via
@code{FormEntry}@footnote{This is not entirely true.  For uploaded
files, the data is accessed via the class @code{FormFile}.}.  You obtain
@code{FormEntry} objects via @code{Cgicc}'s @code{getElement} methods,
all of which return standard-library iterators:

@lisp
vector<FormEntry>::iterator name = cgi.getElement("name");
@end lisp

@noindent
If the item is not found, the iterator will refer to an invalid element,
and should not be dereferenced using @code{operator*} or
@code{operator->}.  @code{Cgicc} provides methods for determining
whether an iterator refers to a valid element:

@lisp
@group
if(name != cgi.getElements().end()) @{
   // iterator refers to a valid element
@}
@end group
@end lisp

@unnumberedsec Output of Form Data

Once you have a valid element, you will more than likely want to do
something with the data The simplest thing to do is just echo it back to
the user.  You can extract a @code{string} from a @code{FormEntry} by
calling the @code{getValue} method.  Since @code{ostream} has an
overload for writing @code{basic_string} objects, it is trivial to
output objects of this type:

@lisp
cout << "Your name is " << name->getValue() << endl;
@end lisp

@noindent
Since both @code{iterator} and @code{FormEntry} overload
@code{operator*}, the code given above may also be written as:

@lisp
cout << "Your name is " << **name << endl;
@end lisp

@noindent
The first * returns an object of type @code{FormEntry}, and the second *
returns an object of type @code{string}.

@unnumberedsec The HTTP Response

A CGI response will generally consist of an HTML document. The HTTP
protocol requires that a certain set of headers precede all documents,
to inform the client of the size and type of data being received, among
other things.  In a normal CGI response, the HTTP server will take care
of sending many of these headers for you.  However, it is necessary for
the CGI script to supply the type of content it is returning to the HTTP
server and the client.  This is done by emitting a @samp{Content-Type}
header@footnote{The full HTTP 1.1 specification may be found in RFC 2068
at @*@url{http://www.w3.org/Protocols/rfc2068/rfc2068}}.

Cgicc provides several classes for outputting HTTP headers, all of which
begin with @code{HTTP}.  A standard HTML document need only output a
single header.

@lisp
cout << HTTPHTMLHeader() << endl;
@end lisp

@unnumberedsec Simple HTML Output

Cgicc provides one class for every HTML tag defined in the HTML 4.0
standard.  These classes have the same name as the HTML tags.  For
example, in HTML, to indicate the start of a document you write
@var{<HTML>}; this can be accomplished using Cgicc by writing

@lisp
cout << html() << endl;
@end lisp

@noindent
The class @code{html} keeps state internally, so the code above will
produce as output @code{<HTML>}; conversely, the code

@lisp
cout << html() << "html text!" << html() << endl;
@end lisp

@noindent
will produce as output @code{<HTML>html text!</HTML>}.

All of Cgicc's HTML output classes are subclasses of the abstract class
@code{HTMLElement}.  You can embed the text for the element directly in
the constructor:

@lisp
cout << html("html text!") << endl;
@end lisp

@noindent
Furthermore, it is possible to embed one @code{HTMLElement} in another:

@lisp
cout << head(title("Title")) << endl;
@end lisp

@noindent
This produces as output @code{<HEAD><TITLE>Title</TITLE></HEAD>}.

@unnumberedsec More Complex HTML Output

In real HTML, most tags possess a set of attributes.  For example, the
HTML @code{<IMG>} tag requires certain attributes specifying the source
image file, the image width, height, and so on.  There are a bewildering
number of possible attributes in HTML 4.0@footnote{For a definitive
list, see the HTML 4.0 specification at
@*@url{http://www.w3.org/TR/REC-html40/}}.  A typical @code{<IMG>} tag
might look like

@example
<IMG SRC="file.jpg" WIDTH="100" HEIGHT="100" ALT="description">
@end example

@noindent
This tag has four attributes: @samp{SRC}, @samp{WIDTH}, @samp{HEIGHT},
and @samp{ALT}, with the values @samp{file.jpg}, @samp{100}, @samp{100},
and @samp{description}, respectively.  Attributes in HTML tags are
represented by the class @code{HTMLAttribute}, which essentially is a
name/value pair.  Since any given @code{HTMLElement} may have any number
of @code{HTMAttribute} objects inside it, the set of
@code{HTMLAttribute} objects inside an @code{HTMLElement} object is
represented using the class @code{HTMLAttributeList}.  To build an
@code{HTMLElement}, use the @code{set} method on
@code{HTMLAttributeList}.  To generate the @code{<IMG>} tag given above:

@lisp
@group
cout << img(set("SRC", "file.jpg")
           .set("WIDTH", "100").set("HEIGHT", "100")
           .set("ALT", "description")) << endl;
@end group
@end lisp

@unnumberedsec Notes on Output

All of Cgicc's output is written to the C++ standard output stream,
@code{cout}.  It is not necessary to use Cgicc's HTML output classes;
they are provided as a convenience. If you prefer, you may output the
HTML code directly to @code{cout}.

@unnumberedsec The Complete Example

The code below is a complete CGI program that synthesizes all the sample
code given in this chapter.

@lisp
@group
#include <iostream>
#include <vector>
#include <string>

#include "cgicc/Cgicc.h"

using namespace std;
using namespace cgicc;

int 
main(int argc, 
     char **argv)
@{
   try @{
      Cgicc cgi;

      // Send HTTP header
      cout << HTTPHTMLHeader() << endl;

      // Set up the HTML document
      cout << html() << << head(title("Cgicc example")) << endl;
      cout << body() << endl;

      // Print out the submitted element
      vector<FormEntry>::iterator name = cgi.getElement("name");
      if(name != cgi.getElements().end()) @{
         cout << "Your name: " << **name << endl;
      @}

      // Close the HTML document
      cout << body() << html();
   @}
   catch(exception& e) @{
      // handle any errors - omitted for brevity
   @}
@}
@end group
@end lisp
