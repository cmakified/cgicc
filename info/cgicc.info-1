This is Info file cgicc.info, produced by Makeinfo version 1.68 from
the input file cgicc.texinfo.

INFO-DIR-SECTION Libraries
START-INFO-DIR-ENTRY
* Cgicc: (cgicc).                 A C++ library for writing CGI
                                  applications.
END-INFO-DIR-ENTRY

   GNU Cgicc is a C++ library for developing CGI applications.

   Copyright (C) 1996, 1997, 1998, 1999 Stephen F. Booth

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "Copying" and "GNU General Public License"
are included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: cgicc.info,  Node: Top,  Next: Overview of CGI,  Prev: (dir),  Up: (dir)

Cgicc
*****

   This document describes the GNU Cgicc library, a C++ class library
that facilitates the development of Common Gateway Inteface (CGI)
applications for the World Wide Web (WWW).

   This is Edition 3.0b of the Cgicc documentation, 26 April 1999.

* Menu:

* Overview of CGI::             An overview of the Common Gateway Interface
* A tutorial example::          An introductory example to using Cgicc
* Library overview::            An overview of Cgicc's layout
* CGI classes::                 Classes used to query and manipulate CGI data
* HTTP header classes::         Classes used for returning response information
* HTML generation classes::     Classes used to return a response to the client
* class Cgicc::                 Used to retrieve form information
* class CgiEnvironment::        Used to retrieve CGI information
* class FormEntry::             Represents a single HTML form element
* class FormFile::              Represents a file uploaded via HTTP
* classes for HTTP headers::    Used for generating response information
* classes for HTML output::     Used for generating a client response
* Copying::                     Your rights to distribute Cgicc
* Concept Index::               Index of concepts introduced in the manual
* Function Index::              Index of member functions
* Data Type Index::             Index of classes


File: cgicc.info,  Node: Overview of CGI,  Next: A tutorial example,  Prev: Top,  Up: Top

Overview of the Common Gateway Interface
****************************************

What is the Common Gateway Interface?
=====================================

   The Common Gateway Interface (CGI) is a standard for external gateway
programs to interface with information servers, such as HTTP servers(1).

CGI scripts or CGI applications?
================================

   Historically, many CGI applications were written in scripting
languages such as Perl.  Not surprisingly, CGI code called by the HTTP
server was referred to as a CGI "script".  As the popularity of the web
grew and the need for dynamic content increased, CGI applications
written in languages other than Perl became more and more popular.
These applications were referred to simply as "scripts". Although the
term "script" does not make intuitive sense for a compiled program, the
term has stuck. In this manual, the terms "script" and "application"
are used interchangeably.

CGI processing
==============

   When an HTTP server receives a request for a CGI script, the server
communicates to the script the details of the request.  The HTTP server
and a CGI script communicate in four major ways:

  1. Environment variables
     The HTTP server uses environment variables to pass information
     about the request to the CGI script.  Depending on the type of
     request, the environment variables may or may not contain all the
     information required by the script to function properly.

  2. The command line
     The command line is only used for `ISINDEX' queries.  Generally,
     ISINDEX queries should not be used; since the command line is used
     directly, they present many potential security risks.

  3. Standard input
     For HTTP `POST' or `PUT' queries, the HTTP server communicates
     information to the CGI script via standard input.  The amount of
     information written to standard input is stored in the
     CONTENT_LENGTH environment variable.

  4. Standard output
     A script returns its output on standard output.  The output can be
     a document generated by the script, or instructions to the server
     for retrieving the desired output.

   ---------- Footnotes ----------

   (1) The official specification for the Common Gateway Interface may
be found at `http://hoohoo.ncsa.uiuc.edu/cgi/interface.html'.


File: cgicc.info,  Node: A tutorial example,  Next: Library overview,  Prev: Overview of CGI,  Up: Top

A tutorial example
******************

Introduction
============

   It is easiest to understand how Cgicc might be used by first looking
at an example.  Suppose you have an HTML form on your web site asking a
user to enter their name, age, and sex, perhaps as part of a
user-registration procedure.  You wish to write a CGI script using Cgicc
to process the form in some meaningful way.

   Applications written using Cgicc, like all other applications, begin
with a `main' function:

     int main(int argc, char **argv)
     {
        // CGI processing goes here
     }

Initialization
==============

   The three main classes of Cgicc you will use to process the submited
data are `Cgicc', `CgiEnvironment', and `FormEntry'.  These classes
will be explained in detail later; for now, it is sufficient to know
that:

   * The class `Cgicc' is used for retrieving information on the
     submitted form elements.

   * The class `CgiEnvironment' is used to retrieve information on
     environment variables passed from the HTTP server.

   * The class `FormEntry' is used to extract various types of data from
     the submitted form elements.

   All of Cgicc's functionality is accessed through class `Cgicc'.
Thus, the first step in CGI processing is to instantiate an object of
type `Cgicc':

     Cgicc cgi;

Upon instantiation, the class `Cgicc' parses all data passed to the CGI
script by the HTTP server.

   Since errors are handled using exceptions, you may with to wrap your
CGI code in a `try' block to better handle unexpected conditions:

     try {
        Cgicc cgi;
     }
     
     catch(exception& e) {
        // Caught a standard library exception or a subclass
     }

Extracting Form Information
===========================

   Each element of data entered by the user is parsed into a
`FormEntry'.  A `FormEntry' contains methods for accessing data as
strings, integers, and doubles.  In the hypothetical form given above,
a user would enter their name, age, and sex.  Regardless of the type of
value, the data is accessed via `FormEntry'(1).  You obtain `FormEntry'
objects via `Cgicc''s `getElement' methods, all of which return
standard-library iterators:

     vector<FormEntry>::iterator name = cgi.getElement("name");

If the item is not found, the iterator will refer to an invalid element,
and should not be dereferenced using `operator*' or `operator->'.
`Cgicc' provides methods for determining whether an iterator refers to
a valid element:

     if(name != cgi.getElements().end()) {
        // iterator refers to a valid element
     }

Output of Form Data
===================

   Once you have a valid element, you will more than likely want to do
something with the data The simplest thing to do is just echo it back to
the user.  You can extract a `string' from a `FormEntry' by calling the
`getValue' method.  Since `ostream' has an overload for writing
`basic_string' objects, it is trivial to output objects of this type:

     cout << "Your name is " << name->getValue() << endl;

Since both `iterator' and `FormEntry' overload `operator*', the code
given above may also be written as:

     cout << "Your name is " << **name << endl;

The first * returns an object of type `FormEntry', and the second *
returns an object of type `string'.

The HTTP Response
=================

   A CGI response will generally consist of an HTML document. The HTTP
protocol requires that a certain set of headers precede all documents,
to inform the client of the size and type of data being received, among
other things.  In a normal CGI response, the HTTP server will take care
of sending many of these headers for you.  However, it is necessary for
the CGI script to supply the type of content it is returning to the HTTP
server and the client.  This is done by emitting a `Content-Type'
header(2).

   Cgicc provides several classes for outputting HTTP headers, all of
which begin with `HTTP'.  A standard HTML document need only output a
single header.

     cout << HTTPHTMLHeader() << endl;

Simple HTML Output
==================

   Cgicc provides one class for every HTML tag defined in the HTML 4.0
standard.  These classes have the same name as the HTML tags.  For
example, in HTML, to indicate the start of a document you write <HTML>;
this can be accomplished using Cgicc by writing

     cout << html() << endl;

The class `html' keeps state internally, so the code above will produce
as output `<HTML>'; conversely, the code

     cout << html() << "html text!" << html() << endl;

will produce as output `<HTML>html text!</HTML>'.

   All of Cgicc's HTML output classes are subclasses of the abstract
class `HTMLElement'.  You can embed the text for the element directly in
the constructor:

     cout << html("html text!") << endl;

Furthermore, it is possible to embed one `HTMLElement' in another:

     cout << head(title("Title")) << endl;

This produces as output `<HEAD><TITLE>Title</TITLE></HEAD>'.

More Complex HTML Output
========================

   In real HTML, most tags possess a set of attributes.  For example,
the HTML `<IMG>' tag requires certain attributes specifying the source
image file, the image width, height, and so on.  There are a bewildering
number of possible attributes in HTML 4.0(3).  A typical `<IMG>' tag
might look like

     <IMG SRC="file.jpg" WIDTH="100" HEIGHT="100" ALT="description">

This tag has four attributes: `SRC', `WIDTH', `HEIGHT', and `ALT', with
the values `file.jpg', `100', `100', and `description', respectively.
Attributes in HTML tags are represented by the Cgicc class
`HTMLAttribute', which essentially is a name/value pair.  Since any
given `HTMLElement' may have any number of `HTMAttribute' objects
inside it, the set of `HTMLAttribute' objects inside an `HTMLElement'
object are represented using the class `HTMLAttributeList'.  To build an
`HTMLElement', use the `add' method on `HTMLAttributeList'.  To
generate the `<IMG>' tag given above:

     cout << img(add("SRC", "file.jpg")
                .add("WIDTH", "100")).add("HEIGHT", "100"))
                .add("ALT", "description")) << endl;

Notes on Output
===============

   All of Cgicc's output is written to the C++ standard output stream,
`cout'.  It is not necessary to use Cgicc's HTML output classes; they
are provided as a convenience. If you prefer, you may output the HTML
code directly.

The Complete Example
====================

   The code below is a complete CGI program that synthesizes all the
sample code given in this chapter.

     #include <iostream>
     #include <vector>
     #include <string>
     
     #include "Cgicc.hh"
     
     using namespace std;
     using namespace cgicc;
     
     int
     main(int argc,
          char **argv)
     {
        try {
           Cgicc cgi;
     
           // Send HTTP header
           cout << HTTPHTMLHeader() << endl;
     
           // Set up the HTML document
           cout << html() << << head(title("Cgicc example")) << endl;
           cout << body() << endl;
     
           // Print out the submitted element
           vector<FormEntry>::iterator name = cgi.getElement("name");
           if(name != cgi.getElements().end()) {
              cout << "Your name: " << **name << endl;
           }
     
           // Close the HTML document
           cout << body() << html();
        }
        catch(exception& e) {
           // handle any errors - omitted for brevity
        }
     }

   ---------- Footnotes ----------

   (1) This is not entirely true.  For uploaded files, the data is
accessed via the class `FormFile'.

   (2) The full HTTP 1.1 specification may be found in RFC 2068 at
`http://www.w3.org/Protocols/rfc2068/rfc2068'

   (3) For a definitive list, see the HTML 4.0 specification at
`http://www.w3.org/TR/REC-html40/'


File: cgicc.info,  Node: Library overview,  Next: CGI classes,  Prev: A tutorial example,  Up: Top

Library overview
****************

   The Cgicc library contains classes divided into two broad groups:

   * "CGI classes" used to query and manipulate CGI data, including
     information on the HTTP server, the current request, and the
     submitted form data.

     *Note CGI classes::, for details.

   * "Response generation classes" used to generate responses to a CGI
     query. Generally, the response will consist of one or more HTTP
     headers followed by HTML text, but the CGI application may return
     data of any type. The response generation classes are subdivided
     into two groups:

        - "HTTP header classes" used to indicate to the client
          information on the data being returned as a result of the CGI
          request.  For example, standard HTTP headers indicate the
          type, size, and modification date of the transmitted data.

          *Note HTTP header classes::, for details.

        - "HTML generation classes" used to generate an HTML response
          following any HTTP headers.  To be compliant with the HTML
          4.0 standard, the response must consist of three parts(1):

            1. A line containing the HTML version information.

            2. A declarative header section (delimited by the `HEAD'
               element).

            3. A body, which contains the document's actual content.
               The body may be implemented by the `BODY' element or the
               `FRAMESET' element.

               *Note HTML generation classes::, for details.

   ---------- Footnotes ----------

   (1) For a complete description see the HTML 4.0 specification at
`http://www.w3.org/TR/REC-html40/'


File: cgicc.info,  Node: CGI classes,  Next: HTTP header classes,  Prev: Library overview,  Up: Top

CGI classes
***********

   CGI classes are used to query and manipulate CGI data passed from the
HTTP server.

 - Class: Cgicc
     `Cgicc' is the main class of the Cgicc library.  It is used to
     retrieve information on specific HTML form elements (such as
     checkboxes, radio buttons, and text fields), on uploaded files,
     and to save, restore, and retrieve information on the CGI
     environment.

     *Note class Cgicc::, for API details.

 - Class: CgiEnvironment
     `CgiEnvironment' encapsulates the data passed from the HTTP server
     to the CGI application.  This includes all environment variables
     set by the HTTP server specified in the CGI standard.

     *Note class CgiEnvironment::, for API details.

 - Class: FormEntry
     `FormEntry' is an immutable class representing a single user entry
     in an HTML form element such as a text field, a radio button, or a
     checkbox.  A `FormEntry' is essentially a name/value pair, where
     the name is the name of the form element as specified in the HTML
     form itself, and the value is user-entered or user-selected value.
     `FormEntry' provides methods allowing access to the value as a
     string, integer, or double.

     *Note class FormEntry::, for API details.

 - Class: FormFile
     `FormFile' is an immutable class representing a file uploaded via
     the HTTP file upload mechanism.  A `FormFile' is very similar to a
     `FormEntry', but does not provide the numerous methods for
     accessing the value as different types.

     *Note class FormFile::, for API details.


File: cgicc.info,  Node: HTTP header classes,  Next: HTML generation classes,  Prev: CGI classes,  Up: Top

HTTP header classes
*******************

   HTTP headers are used to indicate to the client information on the
data being returned as a result of the CGI request.  For example,
standard HTTP headers indicate the type, size, and modification date of
the transmitted data.

 - Class: HTTPCookie
     An `HTTPCookie' is a name/value pair used to store a piece of
     information about the caller using the caller's own machine.
     Cookies are often used as a means to identify users.

 - Class: HTTPHeader
     `HTTPHeader' is the base class for all HTTP headers.  It is rarely
     used directly; instead, use one of the provided subclasses.

 - Class: HTTPContentHeader
     `HTTPContentHeader' is a subclass of `HTTPHeader' used to indicate
     the type of data returned to the client by the CGI application.

 - Class: HTTPRedirectHeader
     `HTTPRedirectHeader' is a subclass of `HTTPHeader' used to
     redirect the client to a different URL.

 - Class: HTTPStatusHeader
     `HTTPStatusHeader' is a subclass of `HTTPHeader' used to return a
     3-digit HTTP status code and the associated message.

 - Class: HTTPNPHeader
     `HTTPNPHeader' is a subclass of `HTTPHeader' used to indicate to
     the HTTP server that it should not parse the data returned by the
     CGI application.  Normally, the HTTP server parses the data
     returned by the CGI application and fills in certain headers, such
     as the data size.

 - Class: HTTPHTMLHeader
     `HTTPHTMLHeader' is a subclass of `HTTPContentHeader' used for
     data of MIME type `text/html'.

 - Class: HTTPPlainHeader
     `HTTPPlainHeader' is a subclass of `HTTPContentHeader' used for
     data of MIME type `text/plain'.

 - Class: HTTPGIFHeader
     `HTTPGIFHeader' is a subclass of `HTTPContentHeader' used for data
     of MIME type `image/gif'.

 - Class: HTTPJPEGHeader
     `HTTPJPEGHeader' is a subclass of `HTTPContentHeader' used for
     data of MIME type `image/jpeg'.

 - Class: HTTPXBMHeader
     `HTTPXBMHeader' is a subclass of `HTTPContentHeader' used for data
     of MIME type `image/x-xbitmap'.

 - Class: HTTPAudioHeader
     `HTTPAudioHeader' is a subclass of `HTTPContentHeader' used for
     data of MIME type `audio/basic'.


File: cgicc.info,  Node: HTML generation classes,  Next: class Cgicc,  Prev: HTTP header classes,  Up: Top

HTML generation classes
***********************

   The Cgicc library provides one class for each HTML element defined in
the HTML 4.0 specification.  In all cases, the name of the class
corresponds to the name of the HTML element.

 - Class: HTMLDoctype
     This class is used to specify the HTML version information as
     required by the HTML 4.0 standard.

 - Class: comment
     An HTML comment.

 - Class: a
     The A element

 - Class: abbr
     The ABBR element

 - Class: acronym
     The ACRONYM element

 - Class: address
     The ADDRESS element

 - Class: area
     The AREA element

 - Class: b
     The B element(1)

 - Class: base
     The BASE element

 - Class: bdo
     The BDO element

 - Class: big
     The BIG element(2)

 - Class: blockquote
     The BLOCKQUOTE element

 - Class: body
     The BODY element

 - Class: br
     The BR element

 - Class: button
     The BUTTON element

 - Class: caption
     The CAPTION element

 - Class: cite
     The CITE element

 - Class: code
     The CODE element

 - Class: col
     The COL element

 - Class: colgroup
     The COLGROUP element

 - Class: dd
     The DD element

 - Class: del
     The DEL element

 - Class: dfn
     The DFN element

 - Class: div
     The DIV element

 - Class: dl
     The DL element

 - Class: dt
     The DT element

 - Class: em
     The EM element

 - Class: fieldset
     The FIELDSET element

 - Class: form
     The FORM element

 - Class: frame
     The FRAME element(3)

 - Class: frameset
     The FRAMESET element(4)

 - Class: h1
     The H1 element

 - Class: h2
     The H2 element

 - Class: h3
     The H3 element

 - Class: h4
     The H4 element

 - Class: h5
     The H5 element

 - Class: h6
     The H6 element

 - Class: head
     The HEAD element

 - Class: hr
     The HR element

 - Class: html
     The HTML element

 - Class: i
     The I element(5)

 - Class: iframe
     The IFRAME element(6)

 - Class: img
     The IMG element

 - Class: input
     The INPUT element

 - Class: ins
     The INS element

 - Class: kbd
     The KBD element

 - Class: label
     The LABEL element

 - Class: legend
     The LEGEND element

 - Class: li
     The LI element

 - Class: link
     The LINK element

 - Class: map
     The MAP element

 - Class: meta
     The META element

 - Class: noframes
     The NOFRAMES element(7)

 - Class: noscript
     The NOSCRIPT element

 - Class: object
     The OBJECT element

 - Class: ol
     The OL element

 - Class: optgroup
     The OPTGROUP element

 - Class: option
     The OPTION element

 - Class: p
     The P element

 - Class: param
     The PARAM element

 - Class: pre
     The PRE element

 - Class: q
     The Q element

 - Class: samp
     The SAMP element

 - Class: script
     The SCRIPT element

 - Class: select
     The SELECT element

 - Class: small
     The SMALL element(8)

 - Class: span
     The SPAN element

 - Class: strong
     The STRONG element

 - Class: style
     The STYLE element

 - Class: sub
     The SUB element

 - Class: sup
     The SUP element

 - Class: table
     The TABLE element

 - Class: tbody
     The TBODY element

 - Class: td
     The TD element

 - Class: textarea
     The TEXTAREA element

 - Class: tfoot
     The TFOOT element

 - Class: th
     The TH element

 - Class: thead
     The THEAD element

 - Class: title
     The TITLE element

 - Class: tr
     The TR element

 - Class: tt
     The TT element(9)

 - Class: ul
     The UL element

 - Class: var
     The VAR element

   ---------- Footnotes ----------

   (1) It is preferable to use stylesheets instead of this element

   (2) It is preferable to use stylesheets instead of this element

   (3) This element is not part of the strict DTD

   (4) This element is not part of the strict DTD

   (5) It is preferable to use stylesheets instead of this element

   (6) This element is not part of the strict DTD

   (7) This element is not part of the strict DTD

   (8) It is preferable to use stylesheets instead of this element

   (9) It is preferable to use stylesheets instead of this element


File: cgicc.info,  Node: class Cgicc,  Next: class CgiEnvironment,  Prev: HTML generation classes,  Up: Top

class `Cgicc'
*************

   `Cgicc' is the main class of the Cgicc library.  It is used to
retrieve information on specific HTML form elements (such as checkboxes,
radio buttons, and text fields), on uploaded files, and to save,
restore, and retrieve information on the CGI environment.

Constructors
============

 - Method on Cgicc: void Cgicc ()
     Constructor.  Upon creation, `Cgicc' performs all necessary CGI
     initialization.

Library Information
===================

 - Method on Cgicc: string getCompileDate () const
     Get the date at which the library was compiled.  The string
     returned is of the format `mmm dd yyyy'.

 - Method on Cgicc: string getCompileTime () const
     Get the time at which the library was compiled.  The string
     returned is of the format `hh:mm:ss' in 24-hour time.

 - Method on Cgicc: string getVersion () const
     Get the version number of Cgicc.  The string returned is of the
     format `#.#'.

 - Method on Cgicc: string getHost () const
     Get the host for which Cgicc was configured.  The string returned
     is a canonical host triplet of the form
     `processor-manufacturer-os'.

Form Element Access
===================

 - Method on Cgicc: bool queryCheckbox (const string& ELEMENTNAME) const
     Returns `true' if a checkbox with name ELEMENTNAME is checked,
     `false' otherwise.

 - Method on Cgicc: vector<FormEntry>::iterator operator[] (const
          string& NAME)
     Find a radio button in a radio group, or a selected list item with
     element name NAME. If an element with name NAME is not found, the
     returned iterator will be set to the value returned by
     `getElements().end()'.

 - Method on Cgicc: vector<FormEntry>::const_iterator operator[] (const
          string& NAME) const
     Find a radio button in a radio group, or a selected list item with
     element name NAME. If an element with name NAME is not found, the
     returned iterator will be set to the value returned by
     `getElements().end()'.

 - Method on Cgicc: vector<FormEntry>::iterator getElement (const
          string& NAME)
     Find a radio button in a radio group, or a selected list item with
     element name NAME. If an element with name NAME is not found, the
     returned iterator will be set to the value returned by
     `getElements().end()'.

 - Method on Cgicc: vector<FormEntry>::const_iterator getElement (const
          string& NAME) const
     Find a radio button in a radio group, or a selected list item with
     element name NAME. If an element with name NAME is not found, the
     returned iterator will be set to the value returned by
     `getElements().end()'.

 - Method on Cgicc: bool getElement (const string& NAME,
          vector<FormEntry>& result) const
     Find multiple checkboxes in a group, or selected items in a list
     with element name NAME.  Returns `true' if any items with name
     NAME were found, `false' otherwise.

 - Method on Cgicc: vector<FormEntry>::iterator getElementByValue
          (const string& VALUE)
     Find a radio button in a radio group, or a selected list item with
     element value VALUE. If an element with value VALUE is not found,
     the returned iterator will be set to the value returned by
     `getElements().end()'.

 - Method on Cgicc: vector<FormEntry>::const_iterator getElementByValue
          (const string& NAME) const
     Find a radio button in a radio group, or a selected list item with
     element value VALUE. If an element with value VALUE is not found,
     the returned iterator will be set to the value returned by
     `getElements().end()'.

 - Method on Cgicc: bool getElementByValue (const string& NAME,
          vector<FormEntry>& result) const
     Find multiple checkboxes in a group, or selected items in a list
     with element value VALUE.  Returns `true' if any items with value
     VALUE were found, `false' otherwise.

 - Method on Cgicc: const vector<FormEntry>& operator* () const
     Get all the submitted form elements, excluding files.

 - Method on Cgicc: const vector<FormEntry>& getElements () const
     Get all the submitted form elements, excluding files.

Uploaded File Access
====================

 - Method on Cgicc: vector<FormFile>::iterator getFile (const string&
          NAME)
     Find an uploaded file with element name NAME.  If a file belonging
     to element name NAME is not found, the returned iterator will be
     set to the value returned by `getFiles().end()'.

 - Method on Cgicc: vector<FormFile>::const_iterator getFile (const
          string& NAME) const
     Find an uploaded file with element name NAME.  If a file belonging
     to element name NAME is not found, the returned iterator will be
     set to the value returned by `getFiles().end()'.

 - Method on Cgicc: const vector<FormFile>& getFiles () const
     Get all uploaded files.

Environment Access
==================

 - Method on Cgicc: const CgiEnvironment& getEnvironment () const
     Returns the current CGI environment.

Save and Restore
================

 - Method on Cgicc: void save (const string& FILENAME) const
     Save the current CGI environment to a file with name FILENAME.

 - Method on Cgicc: void restore (const string& FILENAME)
     Restore the CGI environment from a previously-saved environment
     contained in file FILENAME.


File: cgicc.info,  Node: class CgiEnvironment,  Next: class FormEntry,  Prev: class Cgicc,  Up: Top

class `CgiEnvironment'
**********************

   `CgiEnvironment' encapsulates the data passed from the HTTP server
to the CGI application.  This includes all environment variables set by
the HTTP server specified in the CGI standard.

Constructor
===========

 - Method on CgiEnvironment: void CgiEnvironment ()
     Constructor - not usually called directly.  Instead, an object of
     type `CgiEnvironment' is retrieved by calling the
     `getEnvironment()' method on `Cgicc'.

Server Information
==================

 - Method on CgiEnvironment: string getServerSoftware () const
     Get the name and version of the HTTP server software, for example
     `Apache/1.3.4'.

 - Method on CgiEnvironment: string getServerName () const
     Get the hostname, DNS name, or IP address of the HTTP server.
     This is *not* a URL; for example, `www.gnu.org'.

 - Method on CgiEnvironment: string getGatewayInterface () const
     Get the name and version of the gateway interface.  This is usually
     `CGI/1.1'.

 - Method on CgiEnvironment: string getServerProtocol () const
     Get the name and revision of the protocol used for this request.
     This is usually `HTTP/1.0'.

 - Method on CgiEnvironment: unsigned long getServerPort () const
     Get the port number on the server to which this request was sent.
     This will usually be 80.

CGI Query Information
=====================

 - Method on CgiEnvironment: string getCookies () const
     Get the HTTP cookies associated with this query, if any.  The
     string returned by this method may contain multiple cookies; it is
     recommended to use the method `getCookieList()' instead, which
     returns a `vector<HTTPCookie>'.

 - Method on CgiEnvironment: const vector<HTTPCookie>& getCookies ()
          const
     Get a `vector' containing the HTTP cookies associated with this
     query, if any.

 - Method on CgiEnvironment: string getRequestMethod () const
     Get the request method used for this query.  It is usually one of
     `GET' or `POST'.

 - Method on CgiEnvironment: string getPathInfo () const
     Get the extra path information for this request, given by the
     client.

 - Method on CgiEnvironment: string getPathTranslated () const
     Get the translated path information for this request (the virtual
     to physical mapping; for example, `www.gnu.org' to
     `/htdocs/index.html'.

 - Method on CgiEnvironment: string getScriptName () const
     Get the full path of this CGI application, for self-referential
     URIs.

 - Method on CgiEnvironment: string getQueryString () const
     Get the string following the `?' in the URI which called this CGI
     application.  The query string is only valid for applications
     called via the `GET' method.  For example, in the URI
     `foo.cgi?cgicc=yes', the query string is `cgicc=yes'.

 - Method on CgiEnvironment: unsigned long getContentLength () const
     Get the length of the data read from `stdin', in chars.  This is
     only valid for applications called via the `POST' method.

 - Method on CgiEnvironment: string getContentType () const
     Get the content type of the submitted information.  For
     applications called via the `GET' method, this information is
     irrelevant.  For applications called via the `POST' method, this
     is usually `application/x-www-form-urlencoded'.

 - Method on CgiEnvironment: string getPostData () const
     Get the data passed via `stdin'.  This data is of MIME type
     `getContentType()'.

Server Specific Information
===========================

 - Method on CgiEnvironment: string getReferrer () const
     Get the URI which called this CGI application.  Depending on the
     HTTP server software, this value may not be set.

Remote User Information
=======================

 - Method on CgiEnvironment: string getRemoteHost () const
     Get the hostname of the remote machine making the request.

 - Method on CgiEnvironment: string getRemoteAddr () const
     Get the IP address of the remote machine making the request.

 - Method on CgiEnvironment: string getAuthType () const
     Get the protocol-specific user authentication method used.  This
     is only applicable if the server supports user authentication, and
     the user has authenticated.

 - Method on CgiEnvironment: string getRemoteUser () const
     Get the authenticated remote user name.  This is only applicable
     if the server supports user authentication, and the user has
     authenticated.

 - Method on CgiEnvironment: string getRemoteIdent () const
     Get the remote user name retrieved from the server.  This is only
     applicable if the server supports RFC 931 (obsoleted by RFC 1431)
     identification (1).  This should *only* be used for logging
     purposes.

 - Method on CgiEnvironment: string getAccept () const
     Get the MIME data types accepted by the client's browser.  This
     format of this string is a comma (`,') separated list.

 - Method on CgiEnvironment: string getUserAgent () const
     Get the name of the browser used for this CGI request.  For
     example, `Mozilla/4.1 [en] (WinNT; U)'.

ErrorDocument Handling
======================

   (For a tutorial on ErrorDocument handling, see
`http://hoohoo.ncsa.uiuc.edu/cgi/ErrorCGI.html')

 - Method on CgiEnvironment: string getRedirectRequest () const
     Get the redirect request.  This will only be valid if youare using
     this CGI application in place of the default server messages during
     ErrorDocument handling.

 - Method on CgiEnvironment: string getRedirectURL () const
     Get the redirect URL.  This will only be valid if youare using
     this CGI application in place of the default server messages
     during ErrorDocument handling.

 - Method on CgiEnvironment: string getRedirectStatus () const
     Get the redirect status.  This will only be valid if youare using
     this CGI application in place of the default server messages during
     ErrorDocument handling.

   ---------- Footnotes ----------

   (1) RFC 1431 may be found at
`http://info.internet.isi.edu:80/in-notes/rfc/files/rfc1413.txt'


File: cgicc.info,  Node: class FormEntry,  Next: class FormFile,  Prev: class CgiEnvironment,  Up: Top

class `FormEntry'
*****************

   `FormEntry' is an immutable class representing a single user entry
in an HTML form element such as a text field, a radio button, or a
checkbox.  A `FormEntry' is essentially a name/value pair, where the
name is the name of the form element as specified in the HTML form
itself, and the value is user-entered or user-selected value.

Constructors
============

 - Method on FormEntry: void FormEntry ()
     Default constructor - should not generally be used.

 - Method on FormEntry: void FormEntry (const string& NAME, const
          string& VALUE)
     Constructor.  NAME is the name of the form element, and VALUE is
     the value of the form element.

 - Method on FormEntry: void FormEntry (const FormEntry& ENTRY)
     Copy constructor. ENTRY is the `FormEntry' to copy.

Overloaded Operators
====================

 - Method on FormEntry: bool operator== (const FormEntry& ENTRY) const
     Equality operator.  Returns `true' if ENTRY has the same name and
     value as this `FormEntry', `false' otherwise.

 - Method on FormEntry: bool operator!= (const FormEntry& ENTRY) const
     Inequality operator.  Returns `false' if ENTRY has the same name
     and value as this `FormEntry', `true' otherwise.

 - Method on FormEntry: FormEntry& operator= (const FormEntry& ENTRY)
     Assignment operator. Sets the name and value of this `FormEntry' to
     those of ENTRY.

 - Method on FormEntry: string operator* () const
     Get the value of the form element.  The value may contain line
     breaks.

Accessor Methods
================

 - Method on FormEntry: string getName () const
     Get the name of the form element.

 - Method on FormEntry: string getValue () const
     Get the value of the form element.  The value may contain line
     breaks.

 - Method on FormEntry: string getValue (unsigned int MAXCHARS) const
     Get the value of the form element, truncated to at most MAXCHARS
     characters.

 - Method on FormEntry: string getStrippedValue () const
     Get the value of the form element, stripped of any line breaks.

 - Method on FormEntry: string getStrippedValue (unsigned int MAXCHARS)
          const
     Get the value of the form element, stripped of any line breaks and
     truncatd to MAXCHARS characters.

 - Method on FormEntry: long getIntegerValue (long MIN = LONG_MIN, long
          MAX = LONG_MAX) const
     Get the value of the form element as an integer.  The optional
     parameters MIN and MAX specify the legal range of return values.

 - Method on FormEntry: double getDoubleValue (double MIN = DBL_MIN,
          double MAX = DBL_MAX) const
     Get the value of the form element as a double.  The optional
     parameters MIN and MAX specify the legal range of return values.

 - Method on FormEntry: unsigned int length () const
     Get the number of characters in the value of this form element.

 - Method on FormEntry: bool isEmpty () const
     Returns `true' if the form element is empty, that is, if
     `length()' == 0.


File: cgicc.info,  Node: class FormFile,  Next: classes for HTTP headers,  Prev: class FormEntry,  Up: Top

class `FormFile'
****************

   `FormFile' is an immutable class representing a file uploaded via
the HTTP file upload mechanism.  If you are going to use file upload in
your CGI application, remember to set the ENCTYPE of the form to
`multipart/form-data'.

Constructors
============

 - Method on FormFile: void FormFile ()
     Default constructor - should not generally be used.

 - Method on FormFile: void FormFile (const string& NAME, const string&
          FILENAME, const string& DATATYPE, const string& DATA)
     Constructor.  NAME is the name of the form element, FILENAME is
     the basename of the file on the remote machine, DATATYPE is the
     MIME type of the data, and DATA is the actual file contents.

 - Method on FormFile: void FormFile (const FormFile& FILE)
     Copy constructor.  FILE is the `FormFile' to copy.

Overloaded Operators
====================

 - Method on FormFile: bool operator== (const FormFile& FILE) const
     Equality operator.  Returns `true' if FILE has the same filename
     as this FORMFILE, `false' otherwise.

 - Method on FormFile: bool operator!= (const FormFile& FILE) const
     Inequality operator.  Returns `false' if FILE has the same
     filename as this FORMFILE, `true' otherwise.

 - Method on FormFile: FormFile& operator= (const FormFile& FILE)
     Assignment operator. Sets the name, filename, dataType, and data
     of this `FormFile' to those of FILE.

Accessor Methods
================

 - Method on FormFile: void writeToStream (ostream& OUT)
     Writes the data contained in this `FormFile' to the stream OUT.

 - Method on FormFile: string getName () const
     Get the name of the form element.

 - Method on FormFile: string getFilename () const
     Get the basename of file on the remote machine.

 - Method on FormFile: string getDataType () const
     Get the MIME type of the file data.

 - Method on FormFile: string getData () const
     Get the file data.

 - Method on FormFile: unsigned int getDataLength () const
     Get the length of the file data, in bytes.


File: cgicc.info,  Node: classes for HTTP headers,  Next: classes for HTML output,  Prev: class FormFile,  Up: Top

classes for HTTP headers
************************

HTTPCookie
==========

   An `HTTPCookie' is a name/value pair used to store a piece of
information about the caller using the caller's own machine.  Cookies
are often used as a means to identify users.

Constructors
------------

 - Method on HTTPCookie: void HTTPCookie ()
     Creates an empty `HTTPCookie'.

 - Method on HTTPCookie: void HTTPCookie (const string& NAME, const
          string& VALUE)
     Creates an `HTTPCookie' with name NAME and value VALUE, expiring
     at the end of the current HTTP session.

 - Method on HTTPCookie: void HTTPCookie (const string& NAME, const
          string& VALUE, const string& EXPIRES, const string& PATH,
          const string& DOMAIN, bool SECURE)
     Creates an `HTTPCookie' with name NAME and value VALUE. The cookie
     will expire on date EXPIRES, given in the form `Wdy, DD-Mon-YYYY
     HH:MM:SS GMT'.  If EXPIRES is empty, the cookie will expire at the
     end of the current HTTP session.  PATH is the subset of URIs in a
     domain for which the cookie is valid.  Generally, PATH will be
     `/'.  DOMAIN is the hostname for which this cookie is valid.  If
     DOMAIN is empty, the hostname of the HTTP server which generates
     the response will be used. SECURE indicates if this a secure
     cookie.

 - Method on HTTPCookie: void HTTPCookie (const HTTPCookie& COOKIE)
     Copy constructor.  COOKIE is the `HTTPCookie' to copy.

Accessor Methods
----------------

 - Method on HTTPCookie: string getName () const
     Get the name of this cookie.

 - Method on HTTPCookie: string getValue () const
     Get the value of this cookie.

 - Method on HTTPCookie: string getExpires () const
     Get the expiration date of the cookie, if any.  If not empty, this
     is a string of the form `Wdy, DD-Mon-YYYY HH:MM:SS GMT'.

 - Method on HTTPCookie: string getPath () const
     Get the subset of URIs in a domain for which this cookie is valid.
     If empty, the cookie is valid for all URIs in a domain.

 - Method on HTTPCookie: string getDomain () const
     Get the hostname for which this cookie is valid.  If empty, the
     cookie is valid for the hostname generating the HTTP response.

 - Method on HTTPCookie: bool getSecure () const
     Returns `true' if this cookie is secure, `false' otherwise.

Mutator Methods
---------------

 - Method on HTTPCookie: void setName (const string& NAME)
     Set the name of this cookie to NAME.

 - Method on HTTPCookie: void setValue (const string& VALUE)
     Set the value of this cookie to VALUE.

 - Method on HTTPCookie: void setExpires (const string& EXPIRES)
     Set the expiration date of the cookie.  EXPIRES should be a string
     of the form `Wdy, DD-Mon-YYYY HH:MM:SS GMT'.

 - Method on HTTPCookie: void setPath (const string& PATH)
     Set the subset of URIs in a domain for which this cookie is valid
     to PATH.

 - Method on HTTPCookie: void setDomain (const string& DOMAIN)
     Set the hostname for which this cookie is valid.

 - Method on HTTPCookie: void setSecure (bool SECURE)
     Mark this cookie as secure or unsecure.

HTTPHeader
==========

   `HTTPHeader' is the base class for all HTTP headers.  It is rarely
used directly; instead, use one of the provided subclasses.

 - Method on HTTPHeader: void HTTPHeader (const string& DATA)
     Creates an HTTP header containing data DATA.

 - Method on HTTPHeader: void HTTPHeader (const HTTPHeader& HEADER)
     Creates a copy of the `HTTPHeader' HEADER.

 - Method on HTTPHeader: string getData ()
     Get the data contained in this HTTP header.

HTTPContentHeader
=================

   `HTTPContentHeader' is a subclass of `HTTPHeader' used to indicate
the type of data returned to the client by the CGI application.

 - Method on HTTPContentHeader: void HTTPContentHeader (const string&
          MIMETYPE)
     Creates an HTTP header for data of MIME type MIMETYPE.

HTTPRedirectHeader
==================

   `HTTPRedirectHeader' is a subclass of `HTTPHeader' used to redirect
the client to a different URL.

 - Method on HTTPRedirectHeader: void HTTPRedirectHeader (const string&
          URL)
     Creates an HTTP header used to redirect the client to URL URL.

HTTPStatusHeader
================

   `HTTPStatusHeader' is a subclass of `HTTPHeader' used to return a
3-digit HTTP status code and the associated message.

 - Method on HTTPStatusHeader: void HTTPStatusHeader (int STATUS, const
          string& MESSAGE)
     Creates an HTTP status header.  STATUS is the 3 digit status code,
     for example `404'.  MESSAGE is the message associated with the
     status code, for example `not found'.

HTTPNPHeader
============

   `HTTPNPHeader' is a subclass of `HTTPHeader' used to indicate to the
HTTP server that it should not parse the data returned by the CGI
application.  Normally, the HTTP server parses the data returned by the
CGI application and fills in certain headers, such as the data size.

 - Method on HTTPNPHeader: void HTTPNPHeader ()
     Creates a non-parsed HTTP header.  This tells the HTTP server that
     it should not parse the output of the CGI application.

HTTPHTMLHeader
==============

 - Method on HTTPHTMLHeader: void HTTPHTMLHeader ()
     Creates an HTTP header for data of MIME type `text/html'.

HTTPPlainHeader
===============

 - Method on HTTPPlainHeader: void HTTPPlainHeader ()
     Creates an HTTP header for data of MIME type `text/plain'.

HTTPGIFHeader
=============

 - Method on HTTPGIFHeader: void HTTPGIFHeader ()
     Creates an HTTP header for data of MIME type `image/gif'.

HTTPJPEGHeader
==============

 - Method on HTTPJPEGHeader: void HTTPJPEGHeader ()
     Creates an HTTP header for data of MIME type `image/jpeg'.

HTTPXBMHeader
=============

 - Method on HTTPXBMHeader: void HTTPXBMHeader ()
     Creates an HTTP header for data of MIME type `image/x-xbitmap'.

HTTPAudioHeader
===============

 - Method on HTTPAudioHeader: void HTTPAudioHeader ()
     Creates an HTTP header for data of MIME type `audio/basic'.


File: cgicc.info,  Node: classes for HTML output,  Next: Copying,  Prev: classes for HTTP headers,  Up: Top

classes for HTML output
***********************

   For an introduction to Cgicc's HTML output, please see *Note A
tutorial example::, for more information.

   Cgicc provides one concrete class for each HTML element defined in
the HTML 4.0 standard (*note HTML generation classes::.).  Every class
defining an HTML element is a subclass of the abstract base class
`HTMLElement'.

   There are a number of methods defined on `HTMLElement' which are, by
definition, defined for all subclasses.  In most instances, these
functions will not be used directly, but rather are invoked implicitly
by the subclasses.

HTMLElement
===========

 - Method on HTMLElement: string getName () const
     Returns the name of the HTML element.  For example `HTML' or
     `BODY'.

 - Method on HTMLElement: HTMLAttributeList* getAttributes () const
     Returns the `HTMLAttributeList' containing all the attributes
     associated with this element.

 - Method on HTMLElement: void setAttributes (const HTMLAttributeList
          *ATTRIBUTES)
     Set the attributes associated with this element.

`HTMLElement' Construction
==========================

   All subclasses of `HTMLElement' possess the same set of
constructors.  They are presented here once for all subclasses; in the
documentation below, the arbitrary element `H1', represented by the
class `h1', was chosen.

 - Method on h1: void h1 ()
     Default constructor.  Creates an empty HTML element.

 - Method on h1: void h1 (const string& TEXT)
     Creates a new HTML element containing the text TEXT.

 - Method on h1: void h1 (const HTMLAttributeList& ATTRIBUTES)
     Creates a new HTML element possessing the HTML attributes
     contained in ATTRIBUTES.

 - Method on h1: void h1 (const HTMLSimpleElement& EMBED)
     Creates a new HTML element containing the embedded HTML element
     EMBED.

 - Method on h1: void h1 (const string& TEXT, const HTMLAttributeList&
          ATTRIBUTES)
     Creates a new HTML element containing the text TEXT, and
     possessing the HTML attributes contained in ATTRIBUTES.

 - Method on h1: void h1 (const HTMLAttributeList& ATTRIBUTES, const
          HTMLSimpleElement& EMBED)
     Creates a new HTML element possessing the HTML attributes
     contained in ATTRIBUTES, with the embedded HTML element EMBED.

`HTMLAttributeList' Construction
================================

   For most real-world HTML, an `HTMLElement' will contain one or more
embedded HTML attributes.  HTML attributes are added to `HTMLElement'
objects via the `add' functions.

 - Library Function: HTMLAttributeList& add (const string& NAME)
     Creates an `HTMLAttributeList' containing an `HTMLAtomicAttribute'
     with name NAME.

 - Library Function: HTMLAttributeList& add (const string& NAME, const
          string& VALUE)
     Creates an `HTMLAttributeList' containing an `HTMLAttribute' with
     name NAME and value VALUE.

 - Method on HTMLAttributeList: HTMLAttributeList& add (const string&
          NAME)
     Adds an `HTMLAtomicAttribute' with name NAME to the attribute list.

 - Method on HTMLAttributeList: HTMLAttributeList& add (const string&
          NAME, const string& VALUE)
     Adds an `HTMLAttribute' with name NAME and value VALUE to the
     attribute list.

